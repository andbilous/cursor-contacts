{"version":3,"sources":["components/Contact.jsx","components/Contacts.jsx","App.js","serviceWorker.js","index.js"],"names":["Contact","gender","this","props","contact","firstName","lastName","phone","className","setIcon","Component","Contacts","useState","checked","setChecked","search","setSearch","contacts","toggleChange","e","includes","target","id","filter","item","placeholder","onChange","value","type","arr","filteredArr","filterByCheckbox","console","log","toLowerCase","parseInt","toString","filterArray","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1a4896f.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\n\nclass Contact extends Component {\n\n  setIcon(gender){\n    if(!gender){\n      return ''\n    }\n    if(gender==='male'){\n      return 'fa fa-male';\n    }\n    return 'fa fa-female'\n  }\nrender(){\n  const {firstName, lastName, phone, gender} = this.props.contact;\nreturn (\n<div>\n<div>{firstName}</div>\n<div>{lastName}</div>\n<div>{phone}</div>\n<div>{<i className={this.setIcon(gender)}/>}\n</div>\n<hr/>\n  </div>\n)\n  \n}\n}\nexport default Contact;\n\n","import React,{useState} from 'react';\nimport Contact from './Contact';\n\n\nconst Contacts =()=> {\n  const [checked,setChecked]=useState([]);\n  const [search,setSearch] = useState('');\n  const [contacts]=useState([\n    {\n      firstName: \"Барней\",\n      lastName: \"Стинсовский\",\n      phone: \"+380956319521\",\n      gender: \"male\"\n    }, \n    {\n      firstName: \"Робин\",\n      lastName: \"Щербатская\",\n      phone: \"+380931460123\",\n      gender: \"female\"\n    }, \n    {\n      firstName: \"Аномный\",\n      lastName: \"Анонимус\",\n      phone: \"+380666666666\"\n    }, {\n      firstName: \"Лилия\",\n      lastName: \"Олдровна\",\n      phone: \"+380504691254\",\n      gender: \"female\"\n    }, {\n      firstName: \"Маршэн\",\n      lastName: \"Эриксонян\",\n      phone: \"+380739432123\",\n      gender: \"male\"\n    }, {\n      firstName: \"Теодор\",\n      lastName: \"Мотсбэс\",\n      phone: \"+380956319521\",\n      gender: \"male\"\n    }\n  ])\n\n\n\n const handleSearchChange = (e) =>{\n  setSearch(e.target.value)\n}\n\nconst toggleChange = (e) =>{\n  if(checked.includes(e.target.id)){\n   setChecked(checked.filter(item=>item!==e.target.id));\n  }else{\n    setChecked([...checked,e.target.id]);\n  }\n\n}\n\nconst filterByCheckbox=arr=>{\n  if(checked.includes('male')\n  && \n  !checked.includes('female')\n  && \n  !checked.includes('none')\n  ){\n   return arr.filter(contact=> contact.gender==='male')\n }\n\n  if(checked.includes('female')\n   && \n   !checked.includes('male')\n   && \n   !checked.includes('none')\n   ){\n    return   arr.filter(contact=> contact.gender==='female')\n  }\n\n  if(checked.includes('male') && checked.includes('female')){\n    return   arr.filter(contact=> contact.gender==='male' || contact.gender==='female')\n  }\n  if(checked.includes('female') && checked.includes('none')){\n    return   arr.filter(contact=> !contact.gender || contact.gender==='female')\n  }\n\n  if(checked.includes('male') && checked.includes('none')){\n    return   arr.filter(contact=> !contact.gender || contact.gender==='male')\n  }\n\n  if(checked.includes('none')\n  && \n   !checked.includes('male')\n   && \n   !checked.includes('female')\n  ){\n    return  arr.filter(contact=> !contact.gender)\n  }\n  return arr\n}\n\n\nconst filterArray = arr =>{\n let filteredArr= filterByCheckbox(arr);\n console.log(filteredArr)\n  if(search.toLowerCase()==='male'){\n    return   filteredArr.filter(contact=> contact.gender==='male')\n  }\n  if(search.toLowerCase()==='female'){\n    return   filteredArr.filter(contact=> contact.gender==='female')\n  }\n  if(search.toLowerCase()==='none'){\n    return   filteredArr.filter(contact=> !contact.gender)\n  }\n  if(parseInt(search)){\n    return   filteredArr.filter(contact=> contact.phone.toString().includes(search.toString()))\n  }\n    return   filteredArr.filter(contact=> contact.lastName.toLowerCase().includes(search.toLowerCase()))\n}\n\nreturn (\n<div>\n    <input placeholder='Пошук' onChange={handleSearchChange}/><br/>\n    <label><input\n          id='male'\n          type=\"checkbox\"\n          checked={checked.includes('male')}\n           onChange={toggleChange}\n        />\n        M</label><br/>\n\n        <label><input\n         id='female'\n        type=\"checkbox\"\n        checked={checked.includes('female')}\n        onChange={toggleChange}\n        />\n        Ж</label><br/>\n\n        <label><input\n        id='none'\n        type=\"checkbox\"\n        checked={checked.includes('none')}\n        onChange={toggleChange}\n        />\n        Не вказано</label>\n    <h1>Контакти</h1>\n    {\n    filterArray(contacts).map((contact,index) => {\n      return (\n        <Contact key={index} contact={contact}/>\n      )\n    })}\n  </div>\n)}\n\nexport default Contacts;\n\n","import React from 'react';\nimport Contacts from '../src/components/Contacts'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Contacts/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}